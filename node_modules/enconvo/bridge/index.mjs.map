{"version":3,"sources":["../../src/bridge/clipboard.ts","../../src/bridge/req.ts","../../src/bridge/res.ts","../../src/bridge/language.ts","../../src/bridge/ocr.ts","../../src/bridge/display.ts"],"sourcesContent":["// @ts-ignore\nclass clipboard {\n    static async copy(): Promise<string> {\n        // @ts-ignore\n        return await $clipboard.readText() || \"\";\n    }\n\n    static setString(text: string) {\n        // @ts-ignore\n        $clipboard.setString(text);\n    }\n}\n\nexport {\n    clipboard\n};\n","interface BridgeRequest {\n    text: string;\n    context: {};\n    options: {};\n}\n\nclass req {\n    static body(): BridgeRequest {\n        // @ts-ignore\n        return $body || {};\n    }\n}\n\nexport {\n    req\n};\n","class res {\n    static async text(content: string) {\n        // @ts-ignore\n        return await $completion({\n            \"type\": \"text\",\n            \"value\": content,\n        });\n    }\n\n    static async error(message: string) {\n        // @ts-ignore\n        return await $completion({\n            \"type\": \"error\",\n            \"value\": message,\n        });\n    }\n\n    static respond: string = \"\";\n\n    static async end() {\n        // @ts-ignore\n        const result = await res.text(this.respond);\n        this.respond = \"\";\n        return result;\n    }\n\n    static async write(content: string, type: string = \"text\") {\n        if (type === \"text\") {\n            this.respond += content;\n        }\n        // @ts-ignore\n        return await $streamHandler({\n            \"type\": type,\n            \"value\": content,\n        });\n    }\n}\n\nexport {\n    res\n};\n","class language {\n    static async detect(text: string): Promise<string> {\n        // @ts-ignore\n        return await $Lang.detect(text) || \"en\";\n    }\n\n    static isWord(langCode: string, text: string) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const {Segmenter} = Intl as any;\n        if (!Segmenter) {\n            return false;\n        }\n        const segmenter = new Segmenter(langCode, {granularity: \"word\"});\n        const iterator = segmenter.segment(text)[Symbol.iterator]();\n        return iterator.next().value?.segment === text;\n    }\n\n    static splitByUpperCase(str: string): string[] {\n        return str.split(/(?=[A-Z])/);\n    }\n\n    static splitWord(str: string) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this.splitByUpperCase(str).join(\" \");\n    }\n\n\n}\n\nexport {\n    language\n};\n","// @ts-ignore\nclass ocr {\n    static screenShotOcr(): Promise<string> {\n        // @ts-ignore\n        return $OCR.screenShotOcr();\n    }\n}\n\nexport {\n    ocr\n};\n","// @ts-ignore\nclass display {\n    static showMainWindow(key: string, options: {}) {\n        // @ts-ignore\n        $display.showMainWindow(key, options);\n    }\n}\n\nexport {\n    display\n};\n"],"mappings":";;;;;;;;AACA,IAAM,YAAN,MAAgB;AAAA,EACZ,aAAa,OAAwB;AAEjC,WAAO,MAAM,WAAW,SAAS,KAAK;AAAA,EAC1C;AAAA,EAEA,OAAO,UAAU,MAAc;AAE3B,eAAW,UAAU,IAAI;AAAA,EAC7B;AACJ;;;ACLA,IAAM,MAAN,MAAU;AAAA,EACN,OAAO,OAAsB;AAEzB,WAAO,SAAS,CAAC;AAAA,EACrB;AACJ;;;ACXA,IAAM,OAAN,MAAM,KAAI;AAAA,EACN,aAAa,KAAK,SAAiB;AAE/B,WAAO,MAAM,YAAY;AAAA,MACrB,QAAQ;AAAA,MACR,SAAS;AAAA,IACb,CAAC;AAAA,EACL;AAAA,EAEA,aAAa,MAAM,SAAiB;AAEhC,WAAO,MAAM,YAAY;AAAA,MACrB,QAAQ;AAAA,MACR,SAAS;AAAA,IACb,CAAC;AAAA,EACL;AAAA,EAIA,aAAa,MAAM;AAEf,UAAM,SAAS,MAAM,KAAI,KAAK,KAAK,OAAO;AAC1C,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,MAAM,SAAiB,OAAe,QAAQ;AACvD,QAAI,SAAS,QAAQ;AACjB,WAAK,WAAW;AAAA,IACpB;AAEA,WAAO,MAAM,eAAe;AAAA,MACxB,QAAQ;AAAA,MACR,SAAS;AAAA,IACb,CAAC;AAAA,EACL;AACJ;AAnBI,cAjBE,MAiBK,WAAkB;AAjB7B,IAAM,MAAN;;;ACAA,IAAM,WAAN,MAAe;AAAA,EACX,aAAa,OAAO,MAA+B;AAE/C,WAAO,MAAM,MAAM,OAAO,IAAI,KAAK;AAAA,EACvC;AAAA,EAEA,OAAO,OAAO,UAAkB,MAAc;AANlD;AAQQ,UAAM,EAAC,UAAS,IAAI;AACpB,QAAI,CAAC,WAAW;AACZ,aAAO;AAAA,IACX;AACA,UAAM,YAAY,IAAI,UAAU,UAAU,EAAC,aAAa,OAAM,CAAC;AAC/D,UAAM,WAAW,UAAU,QAAQ,IAAI,EAAE,OAAO,QAAQ,EAAE;AAC1D,aAAO,cAAS,KAAK,EAAE,UAAhB,mBAAuB,aAAY;AAAA,EAC9C;AAAA,EAEA,OAAO,iBAAiB,KAAuB;AAC3C,WAAO,IAAI,MAAM,WAAW;AAAA,EAChC;AAAA,EAEA,OAAO,UAAU,KAAa;AAE1B,WAAO,KAAK,iBAAiB,GAAG,EAAE,KAAK,GAAG;AAAA,EAC9C;AAGJ;;;AC1BA,IAAM,MAAN,MAAU;AAAA,EACN,OAAO,gBAAiC;AAEpC,WAAO,KAAK,cAAc;AAAA,EAC9B;AACJ;;;ACLA,IAAM,UAAN,MAAc;AAAA,EACV,OAAO,eAAe,KAAa,SAAa;AAE5C,aAAS,eAAe,KAAK,OAAO;AAAA,EACxC;AACJ;","names":[]}