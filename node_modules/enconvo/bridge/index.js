"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/bridge/index.ts
var bridge_exports = {};
__export(bridge_exports, {
  clipboard: () => clipboard,
  display: () => display,
  language: () => language,
  ocr: () => ocr,
  req: () => req,
  res: () => res
});
module.exports = __toCommonJS(bridge_exports);

// src/bridge/clipboard.ts
var clipboard = class {
  static async copy() {
    return await $clipboard.readText() || "";
  }
  static setString(text) {
    $clipboard.setString(text);
  }
};

// src/bridge/req.ts
var req = class {
  static body() {
    return $body || {};
  }
};

// src/bridge/res.ts
var _res = class _res {
  static async text(content) {
    return await $completion({
      "type": "text",
      "value": content
    });
  }
  static async error(message) {
    return await $completion({
      "type": "error",
      "value": message
    });
  }
  static async end() {
    const result = await _res.text(this.respond);
    this.respond = "";
    return result;
  }
  static async write(content, type = "text") {
    if (type === "text") {
      this.respond += content;
    }
    return await $streamHandler({
      "type": type,
      "value": content
    });
  }
};
__publicField(_res, "respond", "");
var res = _res;

// src/bridge/language.ts
var language = class {
  static async detect(text) {
    return await $Lang.detect(text) || "en";
  }
  static isWord(langCode, text) {
    var _a;
    const { Segmenter } = Intl;
    if (!Segmenter) {
      return false;
    }
    const segmenter = new Segmenter(langCode, { granularity: "word" });
    const iterator = segmenter.segment(text)[Symbol.iterator]();
    return ((_a = iterator.next().value) == null ? void 0 : _a.segment) === text;
  }
  static splitByUpperCase(str) {
    return str.split(/(?=[A-Z])/);
  }
  static splitWord(str) {
    return this.splitByUpperCase(str).join(" ");
  }
};

// src/bridge/ocr.ts
var ocr = class {
  static screenShotOcr() {
    return $OCR.screenShotOcr();
  }
};

// src/bridge/display.ts
var display = class {
  static showMainWindow(key, options) {
    $display.showMainWindow(key, options);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  clipboard,
  display,
  language,
  ocr,
  req,
  res
});
//# sourceMappingURL=index.js.map